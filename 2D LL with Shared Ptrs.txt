//Andrew Simonetta
//SU Net ID: asimonet, SUID: 431773640
//
//HW6 Due: March 10, Friday, at 11:59PM
#include <iostream>
#include <memory>

using namespace std;
template <typename T> class Node { //Your T has to support either int or float
public:
	shared_ptr<T> pValue; //pValue is a pointer to an object of type T
	shared_ptr<Node<T>> row_next;//Points to the next node in the same row
	shared_ptr<Node<T>> col_next;//Points to the nexe node in the same col
	Node() {}
	Node(T v) { pValue = make_shared<T>(v); }// pValue.reset(new T(v)); will also work,but slower
};

template <typename T> class Ring2D {
public:
	shared_ptr<Node<T>> head;//Points to the node at first row and first column
	Ring2D() {};

	//Implement the following functions:
	Ring2D(const initializer_list<T>& I); //initializer_list 
	/*
	the first two number in the initializer_list will be number of rows and number of columns
	followed by values in each row
	For example, for  3 4  1 2 3 4  5 6 7 8  9 10 11 12: 3 rows and 4 columns; first row: to 1 2 3 4;
	second row: 5 6 7 8; third row 9 10 11 12
	*/
	~Ring2D();//destructor; whenever possible, you should do minimum work.



	Ring2D(const Ring2D<T>& R);//copy constructor
	void operator=(const Ring2D<T>& R);//Lvalue operator=; copy assignment
	Ring2D(Ring2D<T>&& R);//move constructor
	void operator=(Ring2D<T>&& R);//Rvalue operator=; move assignment
	Ring2D<T> ThreeTimes();//Return a Ring2D with values being three times of the current Ring2D

	void DeleteRow(int r);//Delete row r of Ring2D
	//If r is out of range, simply do nothing and return.

};

template <typename T> Ring2D<T>::Ring2D(const initializer_list<T>& I) {
	if (I.begin() == I.end() || I.begin()+1 == I.end() || I.begin() + 2 == I.end()) return;
	
	int rows = *I.begin();
	int cols = *(I.begin() + 1);

	if (rows == 1 || cols == 1) return;

	int size = rows * cols;
	auto it = I.begin() + 2;
	for (int i = 0; i < size; i++) {
		if (it == I.end()) return;
		cout << *it << " ";
		it++;
	}
	if (it != I.end()) return;

	shared_ptr<Node<T>> m = make_shared<Node<T>>();
	shared_ptr<Node<T>> prevRow;
	shared_ptr<Node<T>> rowHead;
	head = m;
	//3 4  1 2 3 4  5 6 7 8  9 10 11 12
	for (int i = 0; i < rows; i++) {
		//first value
		auto it = I.begin() + (2 + cols * i);
		while (it != I.begin() + (2 + cols * (i + 1))) {
			m->col_next = make_shared <Node<T>>(*it);
			if (i != 0) {
				prevRow->row_next = m->col_next;
				prevRow = prevRow->col_next;
			}
			if (it == I.begin() + (2 + cols * i)) {
				rowHead = m->col_next;
			}
			m = m->col_next;
			if (it == I.begin() + (1 + cols * (i + 1))) {
				m->col_next = rowHead;
				m.reset();
				m = make_shared<Node<T>>();
				prevRow = rowHead;
			}
			it++;
		}
		
	}
	shared_ptr<Node<T>> headRow = head->col_next;
	for (int i = 0; i < cols; i++) {
		prevRow->row_next = headRow;
		prevRow = prevRow->col_next;
		headRow = headRow->col_next;
	}

	head = head->col_next;
	cout << "Initializer_list" << endl;
}



template <typename T> Ring2D<T>::~Ring2D() {
	shared_ptr<Node<T>> pHead = head;
	shared_ptr<Node<T>> nHead = head;

	while (pHead) {
		shared_ptr<Node<T>> pX = pHead;
		shared_ptr<Node<T>> nX = pHead;
		while (pX) {
			if (pHead->row_next == nHead) {
				pX->row_next.reset();
				pX.reset();
				break;
			}
			if (pX->col_next == nX) {
				pX->col_next.reset();
				pX.reset();
				break;
			}
			pX = pX->col_next;
		}
		pHead = pHead->row_next;
	}
	pHead.reset();
	nHead.reset();
	head.reset();

	cout << "Destructor" << endl;
}

template <typename T> Ring2D<T>::Ring2D(const Ring2D<T>& R) {
	if (!R.head) return;

	head = make_shared<Node<T>>(*R.head->pValue);
	
	shared_ptr<Node<T>> lHead = head;
	shared_ptr<Node<T>> rHead = R.head;
	shared_ptr<Node<T>> rrHead = R.head;

	shared_ptr<Node<T>> rRow = rHead->col_next;
	shared_ptr<Node<T>> lRow = lHead;
	while (R.head) {
		while (rRow != rHead) {
			//cout << *rRow->pValue << endl;
			lRow->col_next = make_shared<Node<T>>(*rRow->pValue);
			lRow = lRow->col_next;
			rRow = rRow->col_next;
		}
		lRow->col_next = lHead;
		if (rHead->row_next == rrHead)
			break;
		lHead->row_next = make_shared<Node<T>>(*rHead->row_next->pValue);
		rRow = rHead->row_next->col_next;
		lRow = lHead->row_next;
		rHead = rHead->row_next;
		lHead = lHead->row_next;
	}

	if (head->col_next->row_next == nullptr) {
		lHead = head;
		lRow = head->col_next;
		shared_ptr<Node<T>> nRow = head->row_next->col_next;
		while (lHead) {
			while (lRow != lHead) {
				lRow->row_next = nRow;
				lRow = lRow->col_next;
				nRow = nRow->col_next;
			}
			if (lHead->row_next == nullptr) {
				lHead->row_next = head;
				break;
			}
			lHead = lHead->row_next;
			lRow = lHead->col_next;
			if (lHead->row_next != nullptr) {
				nRow = lHead->row_next->col_next;
			}
			else
				nRow = head->col_next;
			if (lHead == head)
				break;
		}

	}

	cout << "Copy Constructor" << endl;
}

template <typename T> void Ring2D<T>::operator=(const Ring2D<T>& R) {
	if (!R.head) return;
	if (head) {
		shared_ptr<Node<T>> pHead = head;
		shared_ptr<Node<T>> nHead = head;

		while (pHead) {
			shared_ptr<Node<T>> pX = pHead;
			shared_ptr<Node<T>> nX = pHead;
			while (pX) {
				if (pHead->row_next == nHead) {
					pX->row_next.reset();
					pX.reset();
					break;
				}
				if (pX->col_next == nX) {
					pX->col_next.reset();
					pX.reset();
					break;
				}
				pX = pX->col_next;
			}
			pHead = pHead->row_next;
		}
		pHead.reset();
		nHead.reset();
		head.reset();
	}

	head = make_shared<Node<T>>(*R.head->pValue);

	shared_ptr<Node<T>> lHead = head;
	shared_ptr<Node<T>> rHead = R.head;
	shared_ptr<Node<T>> rrHead = R.head;

	shared_ptr<Node<T>> rRow = rHead->col_next;
	shared_ptr<Node<T>> lRow = lHead;
	while (R.head) {
		while (rRow != rHead) {
			//cout << *rRow->pValue << endl;
			lRow->col_next = make_shared<Node<T>>(*rRow->pValue);
			lRow = lRow->col_next;
			rRow = rRow->col_next;
		}
		lRow->col_next = lHead;
		if (rHead->row_next == rrHead)
			break;
		lHead->row_next = make_shared<Node<T>>(*rHead->row_next->pValue);
		rRow = rHead->row_next->col_next;
		lRow = lHead->row_next;
		rHead = rHead->row_next;
		lHead = lHead->row_next;
	}

	if (head->col_next->row_next == nullptr) {
		lHead = head;
		lRow = head->col_next;
		shared_ptr<Node<T>> nRow = head->row_next->col_next;
		while (lHead) {
			while (lRow != lHead) {
				lRow->row_next = nRow;
				lRow = lRow->col_next;
				nRow = nRow->col_next;
			}
			if (lHead->row_next == nullptr)
				break;
			lHead = lHead->row_next;
			lRow = lHead->col_next;
			if (lHead->row_next != nullptr) {
				nRow = lHead->row_next->col_next;
			}
			else
				nRow = head->col_next;
			if (lHead == head)
				break;
		}
	}
	cout << "Copy Assignment" << endl;
}

template <typename T> Ring2D<T>::Ring2D(Ring2D<T>&& R) {
	head = R.head;
	R.head.reset();
	cout << "Move Constructor" << endl;
}

template <typename T> void Ring2D<T>::operator=(Ring2D<T>&& R) {
	if (head) {
		shared_ptr<Node<T>> pHead = head;
		shared_ptr<Node<T>> nHead = head;

		while (pHead) {
			shared_ptr<Node<T>> pX = pHead;
			shared_ptr<Node<T>> nX = pHead;
			while (pX) {
				if (pHead->row_next == nHead) {
					pX->row_next.reset();
					pX.reset();
					break;
				}
				if (pX->col_next == nX) {
					pX->col_next.reset();
					pX.reset();
					break;
				}
				pX = pX->col_next;
			}
			pHead = pHead->row_next;
		}
		pHead.reset();
		nHead.reset();
		head.reset();
	}
	head = R.head;
	R.head.reset();
	cout << "Move Assignment" << endl;
}

template <typename T> Ring2D<T> Ring2D<T>::ThreeTimes() {
	Ring2D<T> temp = *this;
	if (!head) return temp;

	shared_ptr<Node<T>> pHead = temp.head;
	shared_ptr<Node<T>> nHead = temp.head;

	while (pHead) {
		shared_ptr<Node<T>> pX = pHead;
		shared_ptr<Node<T>> nX = pHead;
		while (pX) {
			*pX->pValue = (*pX->pValue) * 3;
			pX = pX->col_next;
			if (pX == nX)
				break;
		}
		pHead = pHead->row_next;
		if (pHead == nHead)
			break;
	}

	return temp;
}

template <typename T> ostream& operator<<(ostream& str, const Ring2D<T>& r) {
	str << "";
	shared_ptr<Node<T>> pHead = r.head;
	shared_ptr<Node<T>> nHead = r.head;

	while (pHead) {
		shared_ptr<Node<T>> pX = pHead;
		shared_ptr<Node<T>> nX = pHead;
		while (pX) {
			str << *pX->pValue << " ";
			pX = pX->col_next;
			if (pX == nX)
				break;
		}
		str << endl;
		pHead = pHead->row_next;
		if (pHead == nHead)
			break;
	}
	
	return str;
}

template <typename T> void Ring2D<T>::DeleteRow(int r) {
	//nothing happens
	if (r == 0 || !head) return;
	//deleting the only row -> destroy
	if (r == 1 && head->row_next == head) {
		shared_ptr<Node<T>> pX = head;
		shared_ptr<Node<T>> nX = head;
		while (pX) {
			pX->row_next.reset();
			if (pX->col_next == nX) {
				pX->col_next.reset();
				pX.reset();
				break;
			}
			pX = pX->col_next;
		}
		nX.reset();
		head.reset();
		return;
	}
	shared_ptr<Node<T>> lRow = head;

	for (int i = 1; i < r; i++) {
		lRow = lRow->row_next;
		if (lRow == head) return;
	}
	shared_ptr<Node<T>> before = lRow;
	before = before->row_next;
	while (before->row_next != lRow) {
		before = before->row_next;
	}

	shared_ptr<Node<T>> after = lRow->row_next;
	shared_ptr<Node<T>> beforeHead = before;
	shared_ptr<Node<T>> lTemp = lRow;
	while (before) {
		before->row_next = after;
		lTemp = lRow->col_next;
		lRow.reset();
		before = before->col_next;
		lRow = lTemp;
		after = after->col_next;
		if (before == beforeHead) break;
	}

};//Delete row r of Ring2D
//If r is out of range, simply do nothing and return.

/*
Implement the needed overloaded operater<< such that you can do cout <<Ring2D<T> instance.
For the example described in the above initializer_list, you output should look like:
1 2 3 4
5 6 7 8
9 10 11 12
*/


/*
Print: "Copy Constructor", "Move Constructor", "Copy Assignment", "Move Assignment", "Destructor" when leaving
the corresponding functions --  the same way I did for Lecture on Ring (3/31/2020).


*/


int main() {
	Ring2D<int> R1{ 3, 4,  1, 2, 3, 4,  5, 6, 7, 8, 9, 10, 11, 12};//initializer_list
	cout << R1 << endl << endl;

	Ring2D<int> R2{ R1 };//copy constructor
	cout << R2 << endl << endl;

	Ring2D<int> R3;
	R3 = R1;//copy assignment
	cout << R3 << endl << endl;
	
	Ring2D<int> R4;
	R4 = R1.ThreeTimes();//this is pointing to object R1
	//Compiler will convert it to R4.operator=(R1.ThreeTimes());
	//copy constructor -- declare temp and initialize it to R1
	//move constructor -- create hidden (temporary) copy
	//destructor-- delete temp becuase it goes out of scope
	//move assignment -- Assign value from hidden copy to R4
	//destructor-- delete hedden copy because it goes out of scope
	cout << R4 << endl << endl;
	
	
	R4.DeleteRow(2);
	cout << R4 << endl << endl;

	R4.DeleteRow(2);
	cout << R4 << endl << endl;
	R4.DeleteRow(1);
	cout << R4 << endl << endl;

	return 0;
}

template <typename T> Ring2D<T>::~Ring2D() {
	shared_ptr<Node<T>> pHead = head;
	shared_ptr<Node<T>> nHead = head;

	while (pHead) {
		shared_ptr<Node<T>> pX = pHead;
		shared_ptr<Node<T>> nX = pHead;
		while (pX) {
			if (pHead->row_next == nHead) {
				pX->row_next.reset();
				pX.reset();
				break;
			}
			if (pX->col_next == nX) {
				pX->col_next.reset();
				pX.reset();
				break;
			}
			pX = pX->col_next;
		}
		pHead = pHead->row_next;
	}
	pHead.reset();
	nHead.reset();
	head.reset();

	cout << "Destructor" << endl;
}

template <typename T> Ring2D<T>::Ring2D(const Ring2D<T>& R) {
	if (!R.head) return;

	head = make_shared<Node<T>>(*R.head->pValue);
	
	shared_ptr<Node<T>> lHead = head;
	shared_ptr<Node<T>> rHead = R.head;
	shared_ptr<Node<T>> rrHead = R.head;

	shared_ptr<Node<T>> rRow = rHead->col_next;
	shared_ptr<Node<T>> lRow = lHead;
	while (R.head) {
		while (rRow != rHead) {
			//cout << *rRow->pValue << endl;
			lRow->col_next = make_shared<Node<T>>(*rRow->pValue);
			lRow = lRow->col_next;
			rRow = rRow->col_next;
		}
		lRow->col_next = lHead;
		if (rHead->row_next == rrHead)
			break;
		lHead->row_next = make_shared<Node<T>>(*rHead->row_next->pValue);
		rRow = rHead->row_next->col_next;
		lRow = lHead->row_next;
		rHead = rHead->row_next;
		lHead = lHead->row_next;
	}

	if (head->col_next->row_next == nullptr) {
		lHead = head;
		lRow = head->col_next;
		shared_ptr<Node<T>> nRow = head->row_next->col_next;
		while (lHead) {
			while (lRow != lHead) {
				lRow->row_next = nRow;
				lRow = lRow->col_next;
				nRow = nRow->col_next;
			}
			if (lHead->row_next == nullptr) {
				lHead->row_next = head;
				break;
			}
			lHead = lHead->row_next;
			lRow = lHead->col_next;
			if (lHead->row_next != nullptr) {
				nRow = lHead->row_next->col_next;
			}
			else
				nRow = head->col_next;
			if (lHead == head)
				break;
		}

	}

	cout << "Copy Constructor" << endl;
}

template <typename T> void Ring2D<T>::operator=(const Ring2D<T>& R) {
	if (!R.head) return;
	if (head) {
		shared_ptr<Node<T>> pHead = head;
		shared_ptr<Node<T>> nHead = head;

		while (pHead) {
			shared_ptr<Node<T>> pX = pHead;
			shared_ptr<Node<T>> nX = pHead;
			while (pX) {
				if (pHead->row_next == nHead) {
					pX->row_next.reset();
					pX.reset();
					break;
				}
				if (pX->col_next == nX) {
					pX->col_next.reset();
					pX.reset();
					break;
				}
				pX = pX->col_next;
			}
			pHead = pHead->row_next;
		}
		pHead.reset();
		nHead.reset();
		head.reset();
	}

	head = make_shared<Node<T>>(*R.head->pValue);

	shared_ptr<Node<T>> lHead = head;
	shared_ptr<Node<T>> rHead = R.head;
	shared_ptr<Node<T>> rrHead = R.head;

	shared_ptr<Node<T>> rRow = rHead->col_next;
	shared_ptr<Node<T>> lRow = lHead;
	while (R.head) {
		while (rRow != rHead) {
			//cout << *rRow->pValue << endl;
			lRow->col_next = make_shared<Node<T>>(*rRow->pValue);
			lRow = lRow->col_next;
			rRow = rRow->col_next;
		}
		lRow->col_next = lHead;
		if (rHead->row_next == rrHead)
			break;
		lHead->row_next = make_shared<Node<T>>(*rHead->row_next->pValue);
		rRow = rHead->row_next->col_next;
		lRow = lHead->row_next;
		rHead = rHead->row_next;
		lHead = lHead->row_next;
	}

	if (head->col_next->row_next == nullptr) {
		lHead = head;
		lRow = head->col_next;
		shared_ptr<Node<T>> nRow = head->row_next->col_next;
		while (lHead) {
			while (lRow != lHead) {
				lRow->row_next = nRow;
				lRow = lRow->col_next;
				nRow = nRow->col_next;
			}
			if (lHead->row_next == nullptr)
				break;
			lHead = lHead->row_next;
			lRow = lHead->col_next;
			if (lHead->row_next != nullptr) {
				nRow = lHead->row_next->col_next;
			}
			else
				nRow = head->col_next;
			if (lHead == head)
				break;
		}
	}
	cout << "Copy Assignment" << endl;
}

template <typename T> Ring2D<T>::Ring2D(Ring2D<T>&& R) {
	head = R.head;
	R.head.reset();
	cout << "Move Constructor" << endl;
}

template <typename T> void Ring2D<T>::operator=(Ring2D<T>&& R) {
	if (head) {
		shared_ptr<Node<T>> pHead = head;
		shared_ptr<Node<T>> nHead = head;

		while (pHead) {
			shared_ptr<Node<T>> pX = pHead;
			shared_ptr<Node<T>> nX = pHead;
			while (pX) {
				if (pHead->row_next == nHead) {
					pX->row_next.reset();
					pX.reset();
					break;
				}
				if (pX->col_next == nX) {
					pX->col_next.reset();
					pX.reset();
					break;
				}
				pX = pX->col_next;
			}
			pHead = pHead->row_next;
		}
		pHead.reset();
		nHead.reset();
		head.reset();
	}
	head = R.head;
	R.head.reset();
	cout << "Move Assignment" << endl;
}

template <typename T> Ring2D<T> Ring2D<T>::ThreeTimes() {
	Ring2D<T> temp = *this;
	if (!head) return temp;

	shared_ptr<Node<T>> pHead = temp.head;
	shared_ptr<Node<T>> nHead = temp.head;

	while (pHead) {
		shared_ptr<Node<T>> pX = pHead;
		shared_ptr<Node<T>> nX = pHead;
		while (pX) {
			*pX->pValue = (*pX->pValue) * 3;
			pX = pX->col_next;
			if (pX == nX)
				break;
		}
		pHead = pHead->row_next;
		if (pHead == nHead)
			break;
	}

	return temp;
}

template <typename T> ostream& operator<<(ostream& str, const Ring2D<T>& r) {
	str << "";
	shared_ptr<Node<T>> pHead = r.head;
	shared_ptr<Node<T>> nHead = r.head;

	while (pHead) {
		shared_ptr<Node<T>> pX = pHead;
		shared_ptr<Node<T>> nX = pHead;
		while (pX) {
			str << *pX->pValue << " ";
			pX = pX->col_next;
			if (pX == nX)
				break;
		}
		str << endl;
		pHead = pHead->row_next;
		if (pHead == nHead)
			break;
	}
	
	return str;
}

template <typename T> void Ring2D<T>::DeleteRow(int r) {
	//nothing happens
	if (r == 0 || !head) return;
	//deleting the only row -> destroy
	if (r == 1 && head->row_next == head) {
		shared_ptr<Node<T>> pX = head;
		shared_ptr<Node<T>> nX = head;
		while (pX) {
			pX->row_next.reset();
			if (pX->col_next == nX) {
				pX->col_next.reset();
				pX.reset();
				break;
			}
			pX = pX->col_next;
		}
		nX.reset();
		head.reset();
		return;
	}
	shared_ptr<Node<T>> lRow = head;

	for (int i = 1; i < r; i++) {
		lRow = lRow->row_next;
		if (lRow == head) return;
	}
	shared_ptr<Node<T>> before = lRow;
	before = before->row_next;
	while (before->row_next != lRow) {
		before = before->row_next;
	}

	shared_ptr<Node<T>> after = lRow->row_next;
	shared_ptr<Node<T>> beforeHead = before;
	shared_ptr<Node<T>> lTemp = lRow;
	while (before) {
		before->row_next = after;
		lTemp = lRow->col_next;
		lRow.reset();
		before = before->col_next;
		lRow = lTemp;
		after = after->col_next;
		if (before == beforeHead) break;
	}

};//Delete row r of Ring2D
//If r is out of range, simply do nothing and return.

/*
Implement the needed overloaded operater<< such that you can do cout <<Ring2D<T> instance.
For the example described in the above initializer_list, you output should look like:
1 2 3 4
5 6 7 8
9 10 11 12
*/


/*
Print: "Copy Constructor", "Move Constructor", "Copy Assignment", "Move Assignment", "Destructor" when leaving
the corresponding functions --  the same way I did for Lecture on Ring (3/31/2020).


*/


int main() {
	Ring2D<int> R1{ 3, 4,  1, 2, 3, 4,  5, 6, 7, 8,  9, 10, 11, 12 };//initializer_list
	cout << R1 << endl << endl;

	Ring2D<int> R2{ R1 };//copy constructor
	cout << R2 << endl << endl;

	Ring2D<int> R3;
	R3 = R1;//copy assignment
	cout << R3 << endl << endl;
	
	Ring2D<int> R4;
	R4 = R1.ThreeTimes();//this is pointing to object R1
	//Compiler will convert it to R4.operator=(R1.ThreeTimes());
	//copy constructor -- declare temp and initialize it to R1
	//move constructor -- create hidden (temporary) copy
	//destructor-- delete temp becuase it goes out of scope
	//move assignment -- Assign value from hidden copy to R4
	//destructor-- delete hedden copy because it goes out of scope
	cout << R4 << endl << endl;
	
	
	R4.DeleteRow(2);
	cout << R4 << endl << endl;

	R4.DeleteRow(2);
	cout << R4 << endl << endl;
	R4.DeleteRow(1);
	cout << R4 << endl << endl;

	return 0;
}